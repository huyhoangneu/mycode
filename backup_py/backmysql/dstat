#!/usr/bin/env python2.6
#-*- coding:UTF-8 -*-

from __future__ import generators

try:
    import sys, os, time, sched, re, getopt
    import types, resource, getpass, glob, linecache
except KeyboardInterrupt:
    pass

#import psyco
#psyco.full()
'''
import pstats
http://blog.csdn.net/lanphaday/archive/2008/02/25/2120147.aspx
'''
VERSION = '0.0.1'

if sys.version_info < (2, 2):
    sys.exit('error: Python 2.2 or later required')

### Workaround for python <= 2.2.1
try:
    True, False
except NameError:
    True = 1
    False = 0
pluginpath = [
    os.path.expanduser('~/.dstat/'),                                # home + /.dstat/
    os.path.abspath(os.path.dirname(sys.argv[0])) + '/plugins/',    # binary path + /plugins/
    ]
### Workaround for python < 2.3
#if 'enumerate' not in __builtins__.__dict__.keys():
if sys.version_info >= (2, 2) and sys.version_info < (2, 3):
    def enumerate(sequence):
        index = 0
        for item in sequence:
            yield index, item
            index = index + 1
elif sys.version_info < (2, 2):
    def enumerate(sequence):
        index = 0
        seqlist = []
        for item in sequence:
            seqlist.append((index, item))
            index = index + 1
        return seqlist

class Options:
    def __init__(self, args):
        self.args = args
        self.debug = 0
        self.full = False
        self.profile = ''


        ### List of plugins to show
        self.plugins = []
        allplugins = listplugins()
        #print allplugins

        try:
            opts, args = getopt.getopt(args, 'acdfghilmno:t:prstTvyC:D:I:M:N:S:V',
                ['time=', 'all', 'debug', 'help', 'list', 'output=', 'pidfile=', 'profile', 'version'] + allplugins )
        except getopt.error, exc:
            print 'dstat: %s, try dstat -h for a list of all the options' % str(exc)
            sys.exit(1)
        #print opts, args    
        for opt, arg in opts:
            if opt in ['-c']:
                self.plugins.append('cpu')
            elif opt in ['-t']:
                self.plugins.append('time')
                print time.strftime('%d %b %Y %H:%M:%S %Z' , time.localtime())
                #print time.strftime('%d %b %Y %H:%M:%S %Z' , time.localtime())
            elif opt in ['-h', '--help']:
                self.usage()
                self.help()
                sys.exit(0)
            elif opt in ['-V', '--version']:
                self.version()
                sys.exit(0)
            elif opt in ['--debug']:
                self.debug = self.debug + 1
            elif opt.startswith('--'):
                self.plugins.append(opt[2:])
            else:
                print 'dstat: option %s unknown to getopt, try dstat -h for a list of all the options' % opt
                sys.exit(1)
        if not self.plugins:
            print 'You did not select any stats, using -h by default.'
            self.usage()
            self.help()
            sys.exit(0)

    def version(self):
        print 'Dstat %s' % VERSION
        print 'Written by Dag Wieers <dag@wieers.com>'
        print 'Homepage at http://dag.wieers.com/home-made/dstat/'
        print
        print 'Platform %s/%s' % (os.name, sys.platform)
        print 'Kernel %s' % os.uname()[2]
        print 'Python %s' % sys.version
        print
        #print 'Processors: %d' % getcpunr()
        print 'Pagesize: %d' % resource.getpagesize()
        print 'Clock ticks per secs: %d' % os.sysconf('SC_CLK_TCK')
        print
        global op
        op = self

    def usage(self):
        print 'Usage: dstat [-afv] [options..] [delay [count]]'

    def help(self):
        print '''Versatile tool for generating system resource statistics

Dstat options:
  -c, --cpu              enable cpu stats
     -C 0,3,total           include cpu0, cpu3 and total
  -d, --disk             enable disk stats
     -D total,hda           include hda and total
  -g, --page             enable page stats
  -i, --int              enable interrupt stats
     -I 5,eth2              include int5 and interrupt used by eth2
  -l, --load             enable load stats
  -m, --mem              enable memory stats
  -n, --net              enable network stats
     -N eth1,total          include eth1 and total
  -p, --proc             enable process stats
  -r, --io               enable io stats (I/O requests completed)
  -s, --swap             enable swap stats
     -S swap1,total         include swap1 and total
  -t, --time             enable time/date output
  -T, --epoch            enable time counter (seconds since epoch)
  -y, --sys              enable system stats

  --aio                  enable aio stats
  --fs, --filesystem     enable fs stats
  --ipc                  enable ipc stats
  --lock                 enable lock stats
  --raw                  enable raw stats
  --socket               enable socket stats
  --tcp                  enable tcp stats
  --udp                  enable udp stats
  --unix                 enable unix stats
  --vm                   enable vm stats

  --plugin-name          enable plugins by plugin name (see manual)
  --list                 list all available plugins

  -a, --all              equals -cdngy (default)
  -f, --full             automatically expand -C, -D, -I, -N and -S lists
  -v, --vmstat           equals -pmgdsc -D total

  --float                force float values on screen
  --integer              force integer values on screen

  --bw, --blackonwhite   change colors for white background terminal
  --nocolor              disable colors (implies --noupdate)
  --noheaders            disable repetitive headers
  --noupdate             disable intermediate updates
  --output file          write CSV output to file

delay is the delay in seconds between each update (default: 1)
count is the number of updates to display before exiting (default: unlimited)
'''
def getcpunr():
    "Return the number of CPUs in the system"
    cpunr = -1
    for line in open('/proc/stat', 'r', 0).readlines():
        if line[0:3] == 'cpu':
            cpunr = cpunr + 1
        if cpunr < 0:
            raise Exception, "Problem finding number of CPUs in system."
    return cpunr

def listplugins():
    plugins = [] 
    remod = re.compile('dstat_(.+)$')
    #globals 比较有意思
    for filename in globals():
        if filename.startswith('dstat_'):
            plugins.append(remod.match(filename).groups()[0])
    remod = re.compile('.+/dstat_(.+).py$')
    for path in pluginpath:
        for filename in glob.glob(path + '/dstat_*.py'):
            plugins.append(remod.match(filename).groups()[0].replace('_', '-'))
    plugins.sort()
    return plugins
starttime = time.time()
class dstat():
    def check(self): 
        pass
        #raise Exception, 'Unknown problem, please report'
    def prepare(self):
        self.val = {}
    def test():
        print 'hello W'


class dstat_time(dstat):
    def __init__(self):
        self.name = 'system'
        self.timefmt = os.getenv('DSTAT_TIMEFMT') or '%d-%m %H:%M:%S'
        self.type = 's'
        if op.debug:
            self.width = len(time.strftime(self.timefmt, time.localtime())) + 4
        else:
            self.width = len(time.strftime(self.timefmt, time.localtime()))

        ### We are now using the starttime for this plugin, not the execution time of this plugin
    def extract(self):
        if op.debug:
            print time.strftime(self.timefmt, time.localtime(starttime)) + ".%03d" % (round(starttime * 1000 % 1000 ))
        else:
            self.val['text'] = time.strftime(self.timefmt, time.localtime(starttime))
### Main entrance
def main():
    #mod = 'time'
    #print op.plugins
    #pluginfile = 'dstat_' + mod.replace('-', '_')
    for plugin in op.plugins:
        if plugin == 'cpu':  mods = ( 'cpu', 'cpu24' )
        elif plugin == 'time': mods = ('time', 'time')
        else: mods=(plugin, )
        #print plugin
    for mod in mods:
        #pluginfile = mod.replace('-', '_')
        pluginfile = 'dstat_' + mod.replace('-', '_')
        try:
            #print pluginfile
            if pluginfile not in globals().keys():
                import imp
                fp, pathname, description = imp.find_module(pluginfile, pluginpath)
                execfile(pathname)
                exec 'o = dstat_plugin(); del(dstat_plugin)'
                o.filename = pluginfile
                o.check()
                o.prepare()
                o.extract()# 执行插件
                print o.val
                #print fp , pathname, description
                sys.exit()
            else:
                exec 'o = %s()' % pluginfile
                o.check()
                o.prepare()
                o.extract()
                print o.val
        except Exception, e:
            continue
        except:
            pass
        if op.debug:
            print 'Module', pluginfile,
            print
        #break
    #exec 'o = %s()' % pluginfile
    #o.extract()
    #print op.plugins
if __name__ == '__main__':
    import profile
    try:
        op = Options(sys.argv[1:])
        #profile.run("main()")
        main()
    except KeyboardInterrupt, e:
        if op.update:
            sys.stdout.write('\n')
    exit(0)
else:
    op = Options('')
# vim:ts=4:sw=4:et
