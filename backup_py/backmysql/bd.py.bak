#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Filename: backup.py
# Date: 2007/08/31 - 2007/09/02 - 2007/09/30
'''
用于备份Archlinux的配置文件,   cron定期自动运行
ChangeLog:
	2008/07/31		添加Mysql数据库备份
	2008/07/18		可以删除过期的备份
	2008/02/02		修改备份目标文件的文件名（%Y%m%d_%H:%M:%S）
	2008/01/25		添加自动判断脚本路径
'''
__author__ = "kldoo (kldscs@gmail.com)"
__version__ = "$Revision: 0.5 $"
__date__ = "$Date: 2008/01/25 15:56:17 $"
__copyright__ = "Copyright (c) 2007-2008 kldoo"
__license__ = "LGPL"

#ttserver backup


#wwwroot backup


#mysql backup
##默认的备份list路径 (确定目录有写权限)
backup_path = '/data/backup'
backup_days = 2 #备份保留月数，默认2个月
log_days = 7   #系统日志保留天数
mysql_user = 'root' #Mysql用户，留空则不进行数据库保存，使用root可以避免权限问题
mysql_pass = 'root' #上面指定用户的密码
mysql_host = ''

mysql_inv_db = ['information_schema','test', 'wbjz'] #数据库，可以多个，保证上面那个用户有权限
#mysql_cmd = '`which mysqldump`' #不同系统可能有所不同，尤其是自己编译的
mysqldump_cmd = '/usr/local/mysql/bin/mysqldump'
mysql_cmd = '/usr/local/mysql/bin/mysql'
# 也可自己加入路径，如： '/usr/bin/mysqldump'
mysql_charset = 'utf8' #数据库编码
####################
try:
   import cPickle as pickle
except:
   import pickle
import os,time,sys
import subprocess
#sys.exit()
def write_logs(filename,msg):
	""" 把msg记录在file中
	"""
	f = file(filename, 'aw')
	f.write(msg+'\n')
	f.close()
def getDB():
    mysql_user = 'root'
    mysql_pass = 'root'
    mysql_host = ''
    #db_name_command = "%s -u%s -p%s --default-character-set=%s --opt %s > %s" % \
    #            (mysql_cmd,mysql_user,mysql_pass,mysql_charset,mysql_db[i],db_name)
    if mysql_host == '': mysql_host = 'localhost'
    DB_names_command="%s --user=%s --password=%s --host=%s --batch --skip-column-names -e 'show databases'" % \
                    (mysql_cmd, mysql_user, mysql_pass, mysql_host) 
    p = subprocess.Popen(DB_names_command, shell=True, close_fds=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE) 
    stdoutdata, stderrdata = p.communicate() 
    if p.returncode != 0:
        return False, error_response(DB_names_command, stderrdata)
    #| sed 's/ /%/g'`"
    for dbname in stdoutdata.split('\n'):
        if dbname and dbname not in mysql_inv_db:
            print dbname
            getsoure(dbname)


def getsoure(db_name):
    db_path = backup_path+'/databases'
    db_dir = backup_path + '/databases'
    #if mysql_host == '': mysql_host = 'localhost'
    db_time=time.strftime('%Y%m%d%H%M%S')
    if os.path.exists(db_dir) != True:
        os.makedirs(db_dir)
    db_name_dir=db_dir + os.sep + db_name + os.sep + db_time
    #if os.path.exists(db_dir):
    #    db_dir=db_dir + os.sep + db_name + os.sep + db_time
    
    if os.path.exists(db_name_dir) != True:
        os.makedirs(db_name_dir) #创建零时文件夹
    sql_name = db_name_dir + os.sep + db_name + '_' + db_time + '.sql'
    print sql_name
    db_sql_command =  "%s -u%s -p%s --default-character-set=%s --opt %s > %s" % \
               (mysqldump_cmd, mysql_user, mysql_pass, mysql_charset, db_name, sql_name)
    if subprocess.call(db_sql_command, shell=True) == 0:
        compression(sql_name)
        print 'suss'
    else:
        pass
def compression(sql_name):
    gz_command="gzip -f %s " %(sql_name)
    if subprocess.call(gz_command, shell = True) ==0:
        print sql_name+'.gz'
        return True
    else:
        'a'
        #写日志
        return
    #gz_command="tar -zcf %s %s " %(target,' '.join(source))
#f = p.stdout.read()
    #print f
    #print p.stdout
    #print stats
getDB()
sys.exit()
